__author__ = 'JunHui'

"""
2015 Fall
Formal Languages and Automata

Project 1. 
-- 한글 모아쓰기 오토마타 --
-- 초성 우선 방식 --


20130273 JunHui Park

2015.10.114
"""


class Mealy:    # mealy machine을 정의

    def __init__(self, state, symbol, out_symbol, trans, out_function, initial):
        self.state = state
        self.symbol = symbol
        self.out_symbol = out_symbol
        self.trans = trans
        self.out_function = out_function
        self.initial = initial

    def result(self, sigma):        # Mealy machine의 output들을 print하는 함수 (예비 프로젝트 1-2에서 사용되었다)
        current = self.initial      # current state
        next_state = self.initial   # next state
        dead = True                 # dead state

        for i in sigma:
            try:
                self.symbol.index(i)
            except ValueError as e:
                print(e)
                return

            for f in self.trans:
                if f[0][0] == current and f[0][1] == i:
                    next_state = f[1]
                    dead = False
                    break

            for o in self.out_function:
                if o[0][0] == current and o[0][1] == i:
                    print(o[1], end='')
                    break

            current = next_state

            if dead:
                print("not proper input")
                return

        print('')

    def display_hangul(self, sigma):    # 한글 모아쓰기 출력 함수; result()함수를 기반으로 한글 유니코드 계산에 대한 부분이 추가 되었음

        state_list = []
        value_list = []
        index_list = []
        cursor = 0

        current = self.initial          # current state
        next_state = self.initial       # next state
        dead = True                     # dead state

        jaeum_table = {0: 'ㄱ', 1: 'ㄲ', 2: 'ㄴ', 3: 'ㄷ', 4: 'ㄸ', 5: 'ㄹ', 6: 'ㅁ', 7: 'ㅂ',
                       8: 'ㅃ', 9: 'ㅅ', 10: 'ㅆ', 11: 'ㅇ', 12: 'ㅈ', 13: 'ㅉ', 14: 'ㅊ', 15: 'ㅋ', 16: 'ㅌ', 17: 'ㅍ', 18: 'ㅎ'}
        moeum_table = {0: 'ㅏ', 1: 'ㅐ', 2: 'ㅑ', 3: 'ㅒ', 4: 'ㅓ', 5: 'ㅔ', 6: 'ㅕ', 7: 'ㅖ',
                       8: 'ㅗ', 9: 'ㅘ', 10: 'ㅙ', 11: 'ㅚ', 12: 'ㅛ', 13: 'ㅜ', 14: 'ㅝ', 15: 'ㅞ', 16: 'ㅟ', 17: 'ㅠ', 18: 'ㅡ', 19: 'ㅢ', 20: 'ㅣ'}

        # 받침이었던 자음이 초성이 될 때, 초성의 테이블에 맞도록 인덱싱을 다시 해주기 위한 dictionary
        trd_fst = {1:0, 4:2, 7:3, 8:5, 16:6, 17:7, 19:9, 21:11, 22:12, 23:14, 24:15, 25:16, 26:17, 27:18, 2:1, 20:10}
        # 초성이 받침으로 들어갈 때, 다시 인덱싱 해주기 위한 dcitionary
        fst_trd = {0:1, 2:4, 3:4, 5:8, 6:16, 7:17, 9:19, 11:21, 12:22, 14:23, 15:24, 16:25, 17:26, 18:27, 1:2, 10:20}

        # 겹받침이었던 자음이 초성이 될 때, 겹받침의 정보를 이용해 초성의 테이블에 맞도록 인덱싱 해주기 위한 dictionary ;ex) ㄹㅁ = 10(받침) --> ㅁ = 6(초성)
        double_single = {3:9, 5:12, 6:18, 9:0, 10:6, 11:7, 12:9, 13:16, 14:17, 15:18, 18:9}

        # 겹받침이 앞글자만 받침이 될 때
        double_trd = {3:1, 5:4, 6:4, 9:8, 10:8, 11:8, 12:8, 13:8, 14:8, 15:8, 18:17}
        double = False                  # 겹받침인지 아닌지 표시
        double_delete = False
        result = []                     # 이미 완성된 글자들의 리스트

        # 초성, 중성, 받침의 인덱스; 상황에 따라 다름
        ppre_index = 0
        pre_index = 0
        index = 0

        # 지금까지 입력된 글자의 유니코드 값
        code_value = 0
        previous_value = 0

        count = 0

        for i in sigma:

            count += 1

            # 'd' 심볼(delete)가 들어 왔을 때 delete기능을 수행한다
            if i == 'd':
                if current == 'S' or len(state_list) == 0:
                    if code_value != 0 and current == 'S':
                        code_value = 0
                        for k in result:
                            print(k, end='')
                        print(' ', end='')
                    elif len(result) > 1:
                        result.pop()
                        for k in result:
                            print(k, end='')
                        print(' ', end='')
                    elif len(result) == 1:
                        result[0] = []
                    continue

                if current == 'L' or current == 'K' or current == 'P' or current == 'R' or current == 'N':
                    if double:
                        result.pop()
                        double_delete = True
                    else:
                        double_delete = False
                    double = False
                state_list.pop()
                value_list.pop()
                index_list.pop()

                if current == 'V':
                    current = 'S'
                    code_value = 0
                    for k in result:
                        print(k, end='')
                    print(' ', end='')
                    continue

                if len(state_list) > 0:
                    current = state_list[len(state_list)-1]

                if len(value_list) > 0:
                    code_value = value_list[len(value_list)-1]
                if len(value_list) > 1:
                    previous_value = value_list[len(value_list)-2]

                if len(index_list) > 0:
                    index = index_list[len(index_list)-1]
                if len(index_list) > 1:
                    pre_index = index_list[len(index_list)-2]
                if len(index_list) > 2:
                    ppre_index = index_list[len(index_list)-3]

                for k in result:
                    print(k, end='')
                print(chr(code_value) + ' ', end='')

                continue

            # 알맞은 심볼인지 에러체크
            try:
                self.symbol.index(i)
            except ValueError as e:
                print(e)
                return

            # transition fucntion
            for f in self.trans:
                if f[0][0] == current and f[0][1] == i:
                    next_state = f[1]
                    state_list.append(f[1])
                    dead = False
                    break

            # output function
            for o in self.out_function:
                if o[0][0] == current and o[0][1] == i:
                    if current == 'K' or current == 'P' or current == 'N' or current == 'R':
                        if next_state == 'L':
                            double = True
                            index = o[1]
                            index_list.append(o[1])
                            break
                        else:
                            double = False
                    ppre_index = pre_index
                    pre_index = index
                    index = o[1]
                    index_list.append(o[1])
                    break

            previous = current
            current = next_state

            # state에 따라서 유니코드 값을 계산한다
            if current == 'S':
                if code_value != 0:
                    state_list[0:len(state_list)-2] = []
                    value_list[0:len(value_list)-1] = []
                    index_list[0:len(index_list)-2] = []
                    result.append(chr(code_value))
                previous_value = code_value
                code_value = ord(moeum_table[index])
            elif current == 'V':
                if code_value != 0 and previous != 'K' and previous != 'P' and previous != 'N' and previous != 'R' and previous != 'L':
                    state_list[0:len(state_list)-1] = []
                    value_list[0:len(value_list)] = []
                    index_list[0:len(index_list)-1] = []
                    result.append(chr(code_value))
                if previous == 'K' or previous == 'P' or previous == 'N' or previous == 'R' or previous == 'L':
                    if double:
                        result[len(result)-1] = chr(ord(result[len(result)-1]) - double_trd[pre_index] + pre_index)
                        double = False
                    else:
                        if double_delete:
                            result.append(chr(code_value))
                            double_delete = False
                        else:
                            result[len(result)-1] = chr(ord(result[len(result)-1]) + fst_trd[pre_index])
                previous_value = code_value
                code_value = ord(jaeum_table[index])
            elif current == 'O' or current == 'U' or current == 'A' or current == 'EU' or current == 'I':
                if previous == 'K' or previous == 'P' or previous == 'N' or previous == 'R':
                #   pre_index = trd_fst[pre_index]
                    state_list[len(state_list)-2] = 'V'
                    index_list[len(index_list)-2] = pre_index
                    value_list[len(value_list)-1] = ord(jaeum_table[pre_index])
                    state_list[0:len(state_list)-2] = []
                    value_list[0:len(value_list)-1] = []
                    index_list[0:len(index_list)-2] = []
                #    result.append(chr(previous_value))
                elif previous == 'L' and double:
                    pre_index = double_single[pre_index]
                    state_list[len(state_list)-2] = 'V'
                    index_list[len(index_list)-2] = pre_index
                    value_list[len(value_list)-1] = ord(jaeum_table[pre_index])
                    state_list[0:len(state_list)-2] = []
                    value_list[0:len(value_list)-1] = []
                    index_list[0:len(index_list)-2] = []
                #   result.append(chr(previous_value))
                    double = False
                elif previous == 'L' and ~double:
                #   pre_index = trd_fst[pre_index]
                    state_list[len(state_list)-2] = 'V'
                    index_list[len(index_list)-2] = pre_index
                    value_list[len(value_list)-1] = ord(jaeum_table[pre_index])
                    state_list[0:len(state_list)-2] = []
                    value_list[0:len(value_list)-1] = []
                    index_list[0:len(index_list)-2] = []
                #   result.append(chr(previous_value))
                elif previous == 'O' or previous == 'U' or previous == 'A' or previous == 'EU':
                    pre_index = ppre_index
                previous_value = code_value
                code_value = pre_index*588 + index*28 + 44032
            elif current == 'K' or current == 'P' or current == 'N' or current == 'R' or current == 'L':
                previous_value = code_value
                if count == len(sigma):
                    if double:
                        result.pop()
                    code_value = ppre_index*588 + pre_index*28 + index + 44032
                elif double:
                    result[len(result)-1] = chr(ord(result[len(result)-1]) + double_trd[index])
                    temp = double_single[index]
                    code_value = ord(jaeum_table[temp])
                else:
                    result.append(chr(previous_value))
                    index = trd_fst[index]
                    code_value = ord(jaeum_table[index])

              #  code_value = ppre_index*588 + pre_index*28 + index + 44032
            if current == 'K' or current == 'P' or current == 'N' or current == 'R' or current == 'L':
                if double:
                    value_list.append(ppre_index*588 + pre_index*28 + index + 44032)
                elif count != len(sigma):
                    value_list.append(ppre_index*588 + pre_index*28 + fst_trd[index] + 44032)
            else:
                value_list.append(code_value)

            for k in result:
                print(k, end='')
            print(chr(code_value) + ' ', end='')

            cursor += 1

            if dead:
                print("not proper input")
                return


# define Hangul automata (mealy machine)
H = Mealy(
          # set of states
          ['S', 'V', 'O', 'U', 'A', 'EU', 'I', 'K', 'P', 'N', 'R', 'L'],
          # input symbols
          ['ㄱ', 'ㄴ', 'ㄷ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ', 'ㄲ', 'ㄸ', 'ㅃ', 'ㅆ', 'ㅉ',
           'ㅏ', 'ㅑ', 'ㅓ', 'ㅕ', 'ㅗ', 'ㅛ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅣ', 'ㅐ', 'ㅒ', 'ㅔ', 'ㅖ'],
          # output symbols
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27],
          # transition function
          [[['S', 'ㄱ'], 'V'], [['S', 'ㄴ'], 'V'], [['S', 'ㄷ'], 'V'], [['S', 'ㄹ'], 'V'], [['S', 'ㅁ'], 'V'], [['S', 'ㅂ'], 'V'],
           [['S', 'ㅅ'], 'V'], [['S', 'ㅇ'], 'V'], [['S', 'ㅈ'], 'V'], [['S', 'ㅊ'], 'V'], [['S', 'ㅋ'], 'V'], [['S', 'ㅌ'], 'V'],
           [['S', 'ㅍ'], 'V'], [['S', 'ㅎ'], 'V'], [['S', 'ㅏ'], 'S'], [['S', 'ㅑ'], 'S'], [['S', 'ㅓ'], 'S'], [['S', 'ㅕ'], 'S'],
           [['S', 'ㅗ'], 'S'], [['S', 'ㅛ'], 'S'], [['S', 'ㅜ'], 'S'], [['S', 'ㅠ'], 'S'], [['S', 'ㅡ'], 'S'], [['S', 'ㅣ'], 'S'],
           [['S', 'ㅐ'], 'S'], [['S', 'ㅒ'], 'S'], [['S', 'ㅔ'], 'S'], [['S', 'ㅖ'], 'S'], [['S', 'ㄲ'], 'V'], [['S', 'ㄸ'], 'V'],
           [['S', 'ㅉ'], 'V'], [['S', 'ㅆ'], 'V'], [['S', 'ㅃ'], 'V'],
           [['V', 'ㄱ'], 'V'], [['V', 'ㄴ'], 'V'], [['V', 'ㄷ'], 'V'], [['V', 'ㄹ'], 'V'], [['V', 'ㅁ'], 'V'], [['V', 'ㅂ'], 'V'],
           [['V', 'ㅅ'], 'V'], [['V', 'ㅇ'], 'V'], [['V', 'ㅈ'], 'V'], [['V', 'ㅊ'], 'V'], [['V', 'ㅋ'], 'V'], [['V', 'ㅌ'], 'V'],
           [['V', 'ㅍ'], 'V'], [['V', 'ㅎ'], 'V'], [['V', 'ㄲ'], 'V'], [['V', 'ㄸ'], 'V'], [['V', 'ㅉ'], 'V'], [['V', 'ㅆ'], 'V'],
           [['V', 'ㅃ'], 'V'], [['V', 'ㅏ'], 'A'], [['V', 'ㅑ'], 'A'], [['V', 'ㅓ'], 'A'], [['V', 'ㅕ'], 'A'], [['V', 'ㅡ'], 'EU'],
           [['V', 'ㅗ'], 'O'], [['V', 'ㅜ'], 'U'], [['V', 'ㅛ'], 'I'], [['V', 'ㅠ'], 'I'], [['V', 'ㅣ'], 'I'], [['V', 'ㅐ'], 'I'],
           [['V', 'ㅒ'], 'I'], [['V', 'ㅔ'], 'I'], [['V', 'ㅖ'], 'I'],
           [['O', 'ㄱ'], 'K'], [['O', 'ㅂ'], 'P'], [['O', 'ㄴ'], 'N'], [['O', 'ㄹ'], 'R'], [['O', 'ㄷ'], 'L'], [['O', 'ㅁ'], 'L'],
           [['O', 'ㅅ'], 'L'], [['O', 'ㅇ'], 'L'], [['O', 'ㅈ'], 'L'], [['O', 'ㅊ'], 'L'], [['O', 'ㅋ'], 'L'], [['O', 'ㅌ'], 'L'],
           [['O', 'ㅍ'], 'L'], [['O', 'ㅎ'], 'L'], [['O', 'ㄲ'], 'L'], [['O', 'ㅆ'], 'L'], [['O', 'ㄸ'], 'V'], [['O', 'ㅃ'], 'V'],
           [['O', 'ㅉ'], 'V'], [['O', 'ㅏ'], 'A'], [['O', 'ㅑ'], 'S'], [['O', 'ㅓ'], 'S'], [['O', 'ㅕ'], 'S'], [['O', 'ㅗ'], 'S'],
           [['O', 'ㅛ'], 'S'], [['O', 'ㅜ'], 'S'], [['O', 'ㅠ'], 'S'], [['O', 'ㅡ'], 'S'], [['O', 'ㅣ'], 'I'], [['O', 'ㅐ'], 'I'],
           [['O', 'ㅒ'], 'S'], [['O', 'ㅔ'], 'S'], [['O', 'ㅖ'], 'S'],
           [['U', 'ㄱ'], 'K'], [['U', 'ㅂ'], 'P'], [['U', 'ㄴ'], 'N'], [['U', 'ㄹ'], 'R'], [['U', 'ㄷ'], 'L'], [['U', 'ㅁ'], 'L'],
           [['U', 'ㅅ'], 'L'], [['U', 'ㅇ'], 'L'], [['U', 'ㅈ'], 'L'], [['U', 'ㅊ'], 'L'], [['U', 'ㅋ'], 'L'], [['U', 'ㅌ'], 'L'],
           [['U', 'ㅍ'], 'L'], [['U', 'ㅎ'], 'L'], [['U', 'ㄲ'], 'L'], [['U', 'ㅆ'], 'L'], [['U', 'ㄸ'], 'V'], [['U', 'ㅃ'], 'V'],
           [['U', 'ㅉ'], 'V'], [['U', 'ㅏ'], 'S'], [['U', 'ㅑ'], 'S'], [['U', 'ㅓ'], 'A'], [['U', 'ㅕ'], 'S'], [['U', 'ㅗ'], 'S'],
           [['U', 'ㅛ'], 'S'], [['U', 'ㅜ'], 'S'], [['U', 'ㅠ'], 'S'], [['U', 'ㅡ'], 'S'], [['U', 'ㅣ'], 'I'], [['U', 'ㅐ'], 'S'],
           [['U', 'ㅒ'], 'S'], [['U', 'ㅔ'], 'I'], [['U', 'ㅖ'], 'S'],
           [['A', 'ㄱ'], 'K'], [['A', 'ㅂ'], 'P'], [['A', 'ㄴ'], 'N'], [['A', 'ㄹ'], 'R'], [['A', 'ㄷ'], 'L'], [['A', 'ㅁ'], 'L'],
           [['A', 'ㅅ'], 'L'], [['A', 'ㅇ'], 'L'], [['A', 'ㅈ'], 'L'], [['A', 'ㅊ'], 'L'], [['A', 'ㅋ'], 'L'], [['A', 'ㅌ'], 'L'],
           [['A', 'ㅍ'], 'L'], [['A', 'ㅎ'], 'L'], [['A', 'ㄲ'], 'L'], [['A', 'ㅆ'], 'L'], [['A', 'ㄸ'], 'V'], [['A', 'ㅃ'], 'V'],
           [['A', 'ㅉ'], 'V'], [['A', 'ㅏ'], 'S'], [['A', 'ㅑ'], 'S'], [['A', 'ㅓ'], 'S'], [['A', 'ㅕ'], 'S'], [['A', 'ㅗ'], 'S'],
           [['A', 'ㅛ'], 'S'], [['A', 'ㅜ'], 'S'], [['A', 'ㅠ'], 'S'], [['A', 'ㅡ'], 'S'], [['A', 'ㅣ'], 'S'], [['A', 'ㅐ'], 'S'],
           [['A', 'ㅒ'], 'S'], [['A', 'ㅔ'], 'S'], [['A', 'ㅖ'], 'S'],
           [['EU', 'ㄱ'], 'K'], [['EU', 'ㅂ'], 'P'], [['EU', 'ㄴ'], 'N'], [['EU', 'ㄹ'], 'R'], [['EU', 'ㄷ'], 'L'], [['EU', 'ㅁ'], 'L'],
           [['EU', 'ㅅ'], 'L'], [['EU', 'ㅇ'], 'L'], [['EU', 'ㅈ'], 'L'], [['EU', 'ㅊ'], 'L'], [['EU', 'ㅋ'], 'L'], [['EU', 'ㅌ'], 'L'],
           [['EU', 'ㅍ'], 'L'], [['EU', 'ㅎ'], 'L'], [['EU', 'ㄲ'], 'L'], [['EU', 'ㅆ'], 'L'], [['EU', 'ㄸ'], 'V'], [['EU', 'ㅃ'], 'V'],
           [['EU', 'ㅉ'], 'V'], [['EU', 'ㅏ'], 'S'], [['EU', 'ㅑ'], 'S'], [['EU', 'ㅓ'], 'S'], [['EU', 'ㅕ'], 'S'], [['EU', 'ㅗ'], 'S'],
           [['EU', 'ㅛ'], 'S'], [['EU', 'ㅜ'], 'S'], [['EU', 'ㅠ'], 'S'], [['EU', 'ㅡ'], 'S'], [['EU', 'ㅣ'], 'I'], [['EU', 'ㅐ'], 'S'],
           [['EU', 'ㅒ'], 'S'], [['EU', 'ㅔ'], 'S'], [['EU', 'ㅖ'], 'S'],
           [['I', 'ㄱ'], 'K'], [['I', 'ㅂ'], 'P'], [['I', 'ㄴ'], 'N'], [['I', 'ㄹ'], 'R'], [['I', 'ㄷ'], 'L'], [['I', 'ㅁ'], 'L'],
           [['I', 'ㅅ'], 'L'], [['I', 'ㅇ'], 'L'], [['I', 'ㅈ'], 'L'], [['I', 'ㅊ'], 'L'], [['I', 'ㅋ'], 'L'], [['I', 'ㅌ'], 'L'],
           [['I', 'ㅍ'], 'L'], [['I', 'ㅎ'], 'L'], [['I', 'ㄲ'], 'L'], [['I', 'ㅆ'], 'L'], [['I', 'ㄸ'], 'V'], [['I', 'ㅃ'], 'V'],
           [['I', 'ㅉ'], 'V'], [['I', 'ㅏ'], 'S'], [['I', 'ㅑ'], 'S'], [['I', 'ㅓ'], 'S'], [['I', 'ㅕ'], 'S'], [['I', 'ㅗ'], 'S'],
           [['I', 'ㅛ'], 'S'], [['I', 'ㅜ'], 'S'], [['I', 'ㅠ'], 'S'], [['I', 'ㅡ'], 'S'], [['I', 'ㅣ'], 'S'], [['I', 'ㅐ'], 'S'],
           [['I', 'ㅒ'], 'S'], [['I', 'ㅔ'], 'S'], [['I', 'ㅖ'], 'S'],
           [['K', 'ㅅ'], 'L'], [['K', 'ㄱ'], 'V'], [['K', 'ㄴ'], 'V'], [['K', 'ㄷ'], 'V'], [['K', 'ㄹ'], 'V'], [['K', 'ㅁ'], 'V'],
           [['K', 'ㅂ'], 'V'], [['K', 'ㅇ'], 'V'], [['K', 'ㅈ'], 'V'], [['K', 'ㅊ'], 'V'], [['K', 'ㅋ'], 'V'], [['K', 'ㅌ'], 'V'],
           [['K', 'ㅍ'], 'V'], [['K', 'ㅎ'], 'V'], [['K', 'ㄲ'], 'V'], [['K', 'ㄸ'], 'V'], [['K', 'ㅉ'], 'V'], [['K', 'ㅃ'], 'V'],
           [['K', 'ㅆ'], 'V'], [['K', 'ㅏ'], 'A'], [['K', 'ㅑ'], 'A'], [['K', 'ㅓ'], 'A'], [['K', 'ㅕ'], 'A'], [['K', 'ㅡ'], 'EU'],
           [['K', 'ㅗ'], 'O'], [['K', 'ㅜ'], 'U'], [['K', 'ㅛ'], 'I'], [['K', 'ㅠ'], 'I'], [['K', 'ㅣ'], 'I'], [['K', 'ㅐ'], 'I'],
           [['K', 'ㅒ'], 'I'], [['K', 'ㅔ'], 'I'], [['K', 'ㅖ'], 'I'],
           [['P', 'ㅅ'], 'L'], [['P', 'ㄱ'], 'V'], [['P', 'ㄴ'], 'V'], [['P', 'ㄷ'], 'V'], [['P', 'ㄹ'], 'V'], [['P', 'ㅁ'], 'V'],
           [['P', 'ㅂ'], 'V'], [['P', 'ㅇ'], 'V'], [['P', 'ㅈ'], 'V'], [['P', 'ㅊ'], 'V'], [['P', 'ㅋ'], 'V'], [['P', 'ㅌ'], 'V'],
           [['P', 'ㅍ'], 'V'], [['P', 'ㅎ'], 'V'], [['P', 'ㄲ'], 'V'], [['P', 'ㄸ'], 'V'], [['P', 'ㅉ'], 'V'], [['P', 'ㅃ'], 'V'],
           [['P', 'ㅆ'], 'V'], [['P', 'ㅏ'], 'A'], [['P', 'ㅑ'], 'A'], [['P', 'ㅓ'], 'A'], [['P', 'ㅕ'], 'A'], [['P', 'ㅡ'], 'EU'],
           [['P', 'ㅗ'], 'O'], [['P', 'ㅜ'], 'U'], [['P', 'ㅛ'], 'I'], [['P', 'ㅠ'], 'I'], [['P', 'ㅣ'], 'I'], [['P', 'ㅐ'], 'I'],
           [['P', 'ㅒ'], 'I'], [['P', 'ㅔ'], 'I'], [['P', 'ㅖ'], 'I'],
           [['N', 'ㅈ'], 'L'], [['N', 'ㅎ'], 'L'], [['N', 'ㄱ'], 'V'], [['N', 'ㄴ'], 'V'], [['N', 'ㄷ'], 'V'], [['N', 'ㄹ'], 'V'],
           [['N', 'ㅁ'], 'V'], [['N', 'ㅂ'], 'V'], [['N', 'ㅅ'], 'V'], [['N', 'ㅇ'], 'V'], [['N', 'ㅊ'], 'V'], [['N', 'ㅋ'], 'V'],
           [['N', 'ㅌ'], 'V'], [['N', 'ㅍ'], 'V'], [['N', 'ㄲ'], 'V'], [['N', 'ㄸ'], 'V'], [['N', 'ㅆ'], 'V'], [['N', 'ㅉ'], 'V'],
           [['N', 'ㅃ'], 'V'], [['N', 'ㅏ'], 'A'], [['N', 'ㅑ'], 'A'], [['N', 'ㅓ'], 'A'], [['N', 'ㅕ'], 'A'], [['N', 'ㅡ'], 'EU'],
           [['N', 'ㅗ'], 'O'], [['N', 'ㅜ'], 'U'], [['N', 'ㅛ'], 'I'], [['N', 'ㅠ'], 'I'], [['N', 'ㅣ'], 'I'], [['N', 'ㅐ'], 'I'],
           [['N', 'ㅒ'], 'I'], [['N', 'ㅔ'], 'I'], [['N', 'ㅖ'], 'I'],
           [['R', 'ㄱ'], 'L'], [['R', 'ㅁ'], 'L'], [['R', 'ㅂ'], 'L'], [['R', 'ㅅ'], 'L'], [['R', 'ㅌ'], 'L'], [['R', 'ㅍ'], 'L'],
           [['R', 'ㅎ'], 'L'], [['R', 'ㄴ'], 'V'], [['R', 'ㄷ'], 'V'], [['R', 'ㄹ'], 'V'], [['R', 'ㅇ'], 'V'], [['R', 'ㅈ'], 'V'],
           [['R', 'ㅊ'], 'V'], [['R', 'ㅋ'], 'V'], [['R', 'ㄲ'], 'V'], [['R', 'ㄸ'], 'V'], [['R', 'ㅉ'], 'V'], [['R', 'ㅃ'], 'V'],
           [['R', 'ㅆ'], 'V'], [['R', 'ㅏ'], 'A'], [['R', 'ㅑ'], 'A'], [['R', 'ㅓ'], 'A'], [['R', 'ㅕ'], 'A'], [['R', 'ㅡ'], 'EU'],
           [['R', 'ㅗ'], 'O'], [['R', 'ㅜ'], 'U'], [['R', 'ㅛ'], 'I'], [['R', 'ㅠ'], 'I'], [['R', 'ㅣ'], 'I'], [['R', 'ㅐ'], 'I'],
           [['R', 'ㅒ'], 'I'], [['R', 'ㅔ'], 'I'], [['R', 'ㅖ'], 'I'],
           [['L', 'ㄱ'], 'V'], [['L', 'ㄴ'], 'V'], [['L', 'ㄷ'], 'V'], [['L', 'ㄹ'], 'V'], [['L', 'ㅁ'], 'V'], [['L', 'ㅂ'], 'V'],
           [['L', 'ㅅ'], 'V'], [['L', 'ㅇ'], 'V'], [['L', 'ㅈ'], 'V'], [['L', 'ㅊ'], 'V'], [['L', 'ㅋ'], 'V'], [['L', 'ㅌ'], 'V'],
           [['L', 'ㅍ'], 'V'], [['L', 'ㅎ'], 'V'], [['L', 'ㄲ'], 'V'], [['L', 'ㄸ'], 'V'], [['L', 'ㅆ'], 'V'], [['L', 'ㅉ'], 'V'],
           [['L', 'ㅃ'], 'V'], [['L', 'ㅏ'], 'A'], [['L', 'ㅑ'], 'A'], [['L', 'ㅓ'], 'A'], [['L', 'ㅕ'], 'A'], [['L', 'ㅡ'], 'EU'],
           [['L', 'ㅗ'], 'O'], [['L', 'ㅜ'], 'U'], [['L', 'ㅛ'], 'I'], [['L', 'ㅠ'], 'I'], [['L', 'ㅣ'], 'I'], [['L', 'ㅐ'], 'I'],
           [['L', 'ㅒ'], 'I'], [['L', 'ㅔ'], 'I'], [['L', 'ㅖ'], 'I']],
          # output function
          [[['S', 'ㄱ'], 0], [['S', 'ㄴ'], 2], [['S', 'ㄷ'], 3], [['S', 'ㄹ'], 5], [['S', 'ㅁ'], 6], [['S', 'ㅂ'], 7],
           [['S', 'ㅅ'], 9], [['S', 'ㅇ'], 11], [['S', 'ㅈ'], 12], [['S', 'ㅊ'], 14], [['S', 'ㅋ'], 15], [['S', 'ㅌ'], 16],
           [['S', 'ㅍ'], 17], [['S', 'ㅎ'], 18], [['S', 'ㅏ'], 0], [['S', 'ㅑ'], 2], [['S', 'ㅓ'], 4], [['S', 'ㅕ'], 6],
           [['S', 'ㅗ'], 8], [['S', 'ㅛ'], 12], [['S', 'ㅜ'], 13], [['S', 'ㅠ'], 17], [['S', 'ㅡ'], 18], [['S', 'ㅣ'], 20],
           [['S', 'ㅐ'], 1], [['S', 'ㅒ'], 3], [['S', 'ㅔ'], 5], [['S', 'ㅖ'], 7], [['S', 'ㄲ'], 1], [['S', 'ㄸ'], 4],
           [['S', 'ㅉ'], 13], [['S', 'ㅆ'], 10], [['S', 'ㅃ'], 8],
           [['V', 'ㄱ'], 0], [['V', 'ㄴ'], 2], [['V', 'ㄷ'], 3], [['V', 'ㄹ'], 5], [['V', 'ㅁ'], 6], [['V', 'ㅂ'], 7],
           [['V', 'ㅅ'], 9], [['V', 'ㅇ'], 11], [['V', 'ㅈ'], 12], [['V', 'ㅊ'], 14], [['V', 'ㅋ'], 15], [['V', 'ㅌ'], 16],
           [['V', 'ㅍ'], 17], [['V', 'ㅎ'], 18], [['V', 'ㄲ'], 1], [['V', 'ㄸ'], 4], [['V', 'ㅉ'], 13], [['V', 'ㅆ'], 10],
           [['V', 'ㅃ'], 8], [['V', 'ㅏ'], 0], [['V', 'ㅑ'], 2], [['V', 'ㅓ'], 4], [['V', 'ㅕ'], 6], [['V', 'ㅡ'], 18],
           [['V', 'ㅗ'], 8], [['V', 'ㅜ'], 13], [['V', 'ㅛ'], 12], [['V', 'ㅠ'], 17], [['V', 'ㅣ'], 20], [['V', 'ㅐ'], 1],
           [['V', 'ㅒ'], 3], [['V', 'ㅔ'], 5], [['V', 'ㅖ'], 7],
           [['O', 'ㄱ'], 1], [['O', 'ㅂ'], 17], [['O', 'ㄴ'], 4], [['O', 'ㄹ'], 8], [['O', 'ㄷ'], 7], [['O', 'ㅁ'], 16],
           [['O', 'ㅅ'], 19], [['O', 'ㅇ'], 21], [['O', 'ㅈ'], 22], [['O', 'ㅊ'], 23], [['O', 'ㅋ'], 24], [['O', 'ㅌ'], 25],
           [['O', 'ㅍ'], 26], [['O', 'ㅎ'], 27], [['O', 'ㄲ'], 2], [['O', 'ㅆ'], 20], [['O', 'ㄸ'], 4], [['O', 'ㅃ'], 8],
           [['O', 'ㅉ'], 13], [['O', 'ㅏ'], 9], [['O', 'ㅑ'], 2], [['O', 'ㅓ'], 4], [['O', 'ㅕ'], 6], [['O', 'ㅗ'], 8],
           [['O', 'ㅛ'], 12], [['O', 'ㅜ'], 13], [['O', 'ㅠ'], 17], [['O', 'ㅡ'], 18], [['O', 'ㅣ'], 11], [['O', 'ㅐ'], 10],
           [['O', 'ㅒ'], 3], [['O', 'ㅔ'], 5], [['O', 'ㅖ'], 7],
           [['U', 'ㄱ'], 1], [['U', 'ㅂ'], 17], [['U', 'ㄴ'], 4], [['U', 'ㄹ'], 8], [['U', 'ㄷ'], 7], [['U', 'ㅁ'], 16],
           [['U', 'ㅅ'], 19], [['U', 'ㅇ'], 21], [['U', 'ㅈ'], 22], [['U', 'ㅊ'], 23], [['U', 'ㅋ'], 24], [['U', 'ㅌ'], 25],
           [['U', 'ㅍ'], 26], [['U', 'ㅎ'], 27], [['U', 'ㄲ'], 2], [['U', 'ㅆ'], 20], [['U', 'ㄸ'], 4], [['U', 'ㅃ'], 8],
           [['U', 'ㅉ'], 13], [['U', 'ㅏ'], 0], [['U', 'ㅑ'], 2], [['U', 'ㅓ'], 14], [['U', 'ㅕ'], 6], [['U', 'ㅗ'], 8],
           [['U', 'ㅛ'], 12], [['U', 'ㅜ'], 13], [['U', 'ㅠ'], 17], [['U', 'ㅡ'], 18], [['U', 'ㅣ'], 16], [['U', 'ㅐ'], 1],
           [['U', 'ㅒ'], 3], [['U', 'ㅔ'], 15], [['U', 'ㅖ'], 7],
           [['A', 'ㄱ'], 1], [['A', 'ㅂ'], 17], [['A', 'ㄴ'], 4], [['A', 'ㄹ'], 8], [['A', 'ㄷ'], 7], [['A', 'ㅁ'], 16],
           [['A', 'ㅅ'], 19], [['A', 'ㅇ'], 21], [['A', 'ㅈ'], 22], [['A', 'ㅊ'], 23], [['A', 'ㅋ'], 24], [['A', 'ㅌ'], 25],
           [['A', 'ㅍ'], 26], [['A', 'ㅎ'], 27], [['A', 'ㄲ'], 2], [['A', 'ㅆ'], 20], [['A', 'ㄸ'], 4], [['A', 'ㅃ'], 8],
           [['A', 'ㅉ'], 13], [['A', 'ㅏ'], 0], [['A', 'ㅑ'], 2], [['A', 'ㅓ'], 4], [['A', 'ㅕ'], 6], [['A', 'ㅗ'], 8],
           [['A', 'ㅛ'], 12], [['A', 'ㅜ'], 13], [['A', 'ㅠ'], 17], [['A', 'ㅡ'], 18], [['A', 'ㅣ'], 20], [['A', 'ㅐ'], 1],
           [['A', 'ㅒ'], 3], [['A', 'ㅔ'], 5], [['A', 'ㅖ'], 6],
           [['EU', 'ㄱ'], 1], [['EU', 'ㅂ'], 17], [['EU', 'ㄴ'], 4], [['EU', 'ㄹ'], 8], [['EU', 'ㄷ'], 7], [['EU', 'ㅁ'], 16],
           [['EU', 'ㅅ'], 19], [['EU', 'ㅇ'], 21], [['EU', 'ㅈ'], 22], [['EU', 'ㅊ'], 23], [['EU', 'ㅋ'], 24], [['EU', 'ㅌ'], 25],
           [['EU', 'ㅍ'], 26], [['EU', 'ㅎ'], 27], [['EU', 'ㄲ'], 2], [['EU', 'ㅆ'], 20], [['EU', 'ㄸ'], 4], [['EU', 'ㅃ'], 8],
           [['EU', 'ㅉ'], 13], [['EU', 'ㅏ'], 0], [['EU', 'ㅑ'], 2], [['EU', 'ㅓ'], 4], [['EU', 'ㅕ'], 6], [['EU', 'ㅗ'], 8],
           [['EU', 'ㅛ'], 12], [['EU', 'ㅜ'], 13], [['EU', 'ㅠ'], 17], [['EU', 'ㅡ'], 18], [['EU', 'ㅣ'], 19], [['EU', 'ㅐ'], 1],
           [['EU', 'ㅒ'], 3], [['EU', 'ㅔ'], 5], [['EU', 'ㅖ'], 6],
           [['I', 'ㄱ'], 1], [['I', 'ㅂ'], 17], [['I', 'ㄴ'], 4], [['I', 'ㄹ'], 8], [['I', 'ㄷ'], 7], [['I', 'ㅁ'], 16],
           [['I', 'ㅅ'], 19], [['I', 'ㅇ'], 21], [['I', 'ㅈ'], 22], [['I', 'ㅊ'], 23], [['I', 'ㅋ'], 24], [['I', 'ㅌ'], 25],
           [['I', 'ㅍ'], 26], [['I', 'ㅎ'], 27], [['I', 'ㄲ'], 2], [['I', 'ㅆ'], 20], [['I', 'ㄸ'], 4], [['I', 'ㅃ'], 8],
           [['I', 'ㅉ'], 13], [['I', 'ㅏ'], 0], [['I', 'ㅑ'], 2], [['I', 'ㅓ'], 4], [['I', 'ㅕ'], 6], [['I', 'ㅗ'], 8],
           [['I', 'ㅛ'], 12], [['I', 'ㅜ'], 13], [['I', 'ㅠ'], 17], [['I', 'ㅡ'], 18], [['I', 'ㅣ'], 20], [['I', 'ㅐ'], 1],
           [['I', 'ㅒ'], 3], [['I', 'ㅔ'], 5], [['I', 'ㅖ'], 7],
           [['K', 'ㅅ'], 3], [['K', 'ㄱ'], 0], [['K', 'ㄴ'], 2], [['K', 'ㄷ'], 3], [['K', 'ㄹ'], 5], [['K', 'ㅁ'], 6],
           [['K', 'ㅂ'], 7], [['K', 'ㅇ'], 11], [['K', 'ㅈ'], 12], [['K', 'ㅊ'], 14], [['K', 'ㅋ'], 15], [['K', 'ㅌ'], 16],
           [['K', 'ㅍ'], 17], [['K', 'ㅎ'], 18], [['K', 'ㄲ'], 1], [['K', 'ㄸ'], 4], [['K', 'ㅉ'], 13], [['K', 'ㅃ'], 8],
           [['K', 'ㅆ'], 10], [['K', 'ㅏ'], 0], [['K', 'ㅑ'], 2], [['K', 'ㅓ'], 4], [['K', 'ㅕ'], 6], [['K', 'ㅡ'], 18],
           [['K', 'ㅗ'], 8], [['K', 'ㅜ'], 13], [['K', 'ㅛ'], 12], [['K', 'ㅠ'], 17], [['K', 'ㅣ'], 20], [['K', 'ㅐ'], 1],
           [['K', 'ㅒ'], 3], [['K', 'ㅔ'], 5], [['K', 'ㅖ'], 7],
           [['P', 'ㅅ'], 18], [['P', 'ㄱ'], 0], [['P', 'ㄴ'], 2], [['P', 'ㄷ'], 3], [['P', 'ㄹ'], 5], [['P', 'ㅁ'], 6],
           [['P', 'ㅂ'], 7], [['P', 'ㅇ'], 11], [['P', 'ㅈ'], 12], [['P', 'ㅊ'], 14], [['P', 'ㅋ'], 15], [['P', 'ㅌ'], 16],
           [['P', 'ㅍ'], 17], [['P', 'ㅎ'], 18], [['P', 'ㄲ'], 1], [['P', 'ㄸ'], 4], [['P', 'ㅉ'], 13], [['P', 'ㅃ'], 8],
           [['P', 'ㅆ'], 10], [['P', 'ㅏ'], 0], [['P', 'ㅑ'], 2], [['P', 'ㅓ'], 4], [['P', 'ㅕ'], 6], [['P', 'ㅡ'], 18],
           [['P', 'ㅗ'], 8], [['P', 'ㅜ'], 13], [['P', 'ㅛ'], 12], [['P', 'ㅠ'], 17], [['P', 'ㅣ'], 20], [['P', 'ㅐ'], 1],
           [['P', 'ㅒ'], 3], [['P', 'ㅔ'], 5], [['P', 'ㅖ'], 7],
           [['N', 'ㅈ'], 5], [['N', 'ㅎ'], 6], [['N', 'ㄱ'], 0], [['N', 'ㄴ'], 2], [['N', 'ㄷ'], 3], [['N', 'ㄹ'], 5],
           [['N', 'ㅁ'], 6], [['N', 'ㅂ'], 7], [['N', 'ㅅ'], 9], [['N', 'ㅇ'], 11], [['N', 'ㅊ'], 12], [['N', 'ㅋ'], 15],
           [['N', 'ㅌ'], 16], [['N', 'ㅍ'], 17], [['N', 'ㄲ'], 1], [['N', 'ㄸ'], 4], [['N', 'ㅆ'], 10], [['N', 'ㅉ'], 13],
           [['N', 'ㅃ'], 8], [['N', 'ㅏ'], 0], [['N', 'ㅑ'], 2], [['N', 'ㅓ'], 4], [['N', 'ㅕ'], 6], [['N', 'ㅡ'], 18],
           [['N', 'ㅗ'], 8], [['N', 'ㅜ'], 13], [['N', 'ㅛ'], 12], [['N', 'ㅠ'], 17], [['N', 'ㅣ'], 20], [['N', 'ㅐ'], 1],
           [['N', 'ㅒ'], 3], [['N', 'ㅔ'], 5], [['N', 'ㅖ'], 7],
           [['R', 'ㄱ'], 9], [['R', 'ㅁ'], 10], [['R', 'ㅂ'], 11], [['R', 'ㅅ'], 12], [['R', 'ㅌ'], 13], [['R', 'ㅍ'], 14],
           [['R', 'ㅎ'], 15], [['R', 'ㄴ'], 2], [['R', 'ㄷ'], 3], [['R', 'ㄹ'], 5], [['R', 'ㅇ'], 11], [['R', 'ㅈ'], 12],
           [['R', 'ㅊ'], 14], [['R', 'ㅋ'], 15], [['R', 'ㄲ'], 1], [['R', 'ㄸ'], 4], [['R', 'ㅉ'], 13], [['R', 'ㅃ'], 8],
           [['R', 'ㅆ'], 10], [['R', 'ㅏ'], 0], [['R', 'ㅑ'], 2], [['R', 'ㅓ'], 4], [['R', 'ㅕ'], 6], [['R', 'ㅡ'], 18],
           [['R', 'ㅗ'], 8], [['R', 'ㅜ'], 13], [['R', 'ㅛ'], 12], [['R', 'ㅠ'], 17], [['R', 'ㅣ'], 20], [['R', 'ㅐ'], 1],
           [['R', 'ㅒ'], 3], [['R', 'ㅔ'], 5], [['R', 'ㅖ'], 7],
           [['L', 'ㄱ'], 0], [['L', 'ㄴ'], 2], [['L', 'ㄷ'], 3], [['L', 'ㄹ'], 5], [['L', 'ㅁ'], 6], [['L', 'ㅂ'], 7],
           [['L', 'ㅅ'], 9], [['L', 'ㅇ'], 11], [['L', 'ㅈ'], 12], [['L', 'ㅊ'], 14], [['L', 'ㅋ'], 15], [['L', 'ㅌ'], 16],
           [['L', 'ㅍ'], 17], [['L', 'ㅎ'], 18], [['L', 'ㄲ'], 1], [['L', 'ㄸ'], 4], [['L', 'ㅆ'], 10], [['L', 'ㅉ'], 13],
           [['L', 'ㅃ'], 8], [['L', 'ㅏ'], 0], [['L', 'ㅑ'], 2], [['L', 'ㅓ'], 4], [['L', 'ㅕ'], 6], [['L', 'ㅡ'], 18],
           [['L', 'ㅗ'], 8], [['L', 'ㅜ'], 13], [['L', 'ㅛ'], 12], [['L', 'ㅠ'], 17], [['L', 'ㅣ'], 20], [['L', 'ㅐ'], 1],
           [['L', 'ㅒ'], 3], [['L', 'ㅔ'], 5], [['L', 'ㅖ'], 7]],
          'S')

while True:
    a = input("입력 : ")
    H.display_hangul(a)
    print()


